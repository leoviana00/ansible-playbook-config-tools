---

- name: Update and upgrade all packages to the latest version
  ansible.builtin.apt:
    update_cache: yes
    upgrade: dist
    cache_valid_time: 3600

- name: Install required packages
  ansible.builtin.apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - gnupg2
      - software-properties-common
      - curl
      - wget
    state: present
    update_cache: yes

- name: Install tools
  ansible.builtin.apt:
    pkg:
      - vim
      - net-tools
      - ansible
      - vagrant
      - git
      - htop
      - flameshot
    state: present
    update_cache: yes

- name: Install Python Packages
  ansible.builtin.apt:
    pkg:
      - python3-pip
      - virtualenv
      - python3-setuptools
    state: present
    update_cache: yes

- name: Create directory for Docker's GPG key
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Add Docker's official GPG key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/"{{ ansible_distribution | lower }}"/gpg
    keyring: /etc/apt/keyrings/docker.gpg
    state: present
  when:
    - ansible_facts['distribution'] != "Pop!_OS"

- name: Add Docker's official GPG key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    keyring: /etc/apt/keyrings/docker.gpg
    state: present
  when:
    - ansible_facts['distribution'] == "Pop!_OS"

- name: Print architecture variables
  ansible.builtin.debug:
    msg: "Distribution: {{ ansible_distribution | lower }}, Architecture: {{ ansible_architecture }}, Codename: {{ ansible_lsb.codename }}"

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: >- 
      deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
      signed-by=/etc/apt/keyrings/docker.gpg]
      https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_lsb.codename }} stable
    state: present
    update_cache: yes
  when:
    - ansible_facts['distribution'] != "Pop!_OS"

- name: Add Docker repository
  ansible.builtin.shell:
    cmd: |
      echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu 
      "$(. /etc/os-release && echo "$UBUNTU_CODENAME")" stable" 
  when:
    - ansible_facts['distribution'] == "Pop!_OS"

- name: Install Docker and related packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
    - docker-ce
    - docker-ce-cli
    - containerd.io
    - docker-buildx-plugin
    - docker-compose-plugin

- name: Check Docker Compose Plugin version
  ansible.builtin.shell:
    cmd: docker compose version
  register: docker_compose_plugin_version
  changed_when: false

- name: Display Docker Compose Plugin version
  ansible.builtin.debug: 
    var: docker_compose_plugin_version.stdout

- name: Install Docker module for Python
  ansible.builtin.pip:
    name: docker

- name: Install Docker-Compose & Set Permission
  ansible.builtin.get_url:
    url: https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64
    dest: /usr/local/bin/docker-compose
    mode: '755'

- name: Create Docker-Compose symlink
  ansible.builtin.command:
    cmd: ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    creates: /usr/bin/docker-compose

- name: Add Docker group
  ansible.builtin.group:
    name: docker
    state: present

- name: Add user to Docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: true

- name: Enable and start Docker services
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
    state: started
  loop:
    - docker.service
    - containerd.service

- name: Check Docker version
  ansible.builtin.shell:
    cmd: docker --version 
  register: docker_version
  changed_when: false

- name: Display Docker version
  ansible.builtin.debug: 
    var: docker_version.stdout

- name: Check Docker Compose version
  ansible.builtin.shell:
    cmd: docker-compose -v
  register: docker_compose_version
  changed_when: false

- name: Display Docker Compose version
  ansible.builtin.debug: 
    var: docker_compose_version.stdout